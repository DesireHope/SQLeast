#include <rm/filescan.h>
#include "ql/query.h"
#include "sm/systemmanager.h"
#include "sm/exception.h"
#include "sm/dbhandle.h"

#define ZXK

#ifdef ZXK

namespace sqleast {

    namespace ql {

        sm::DBHandle *dbManager = nullptr;

        void SingleStringQuery::execute() {
            if (type == Q_CREATE_DB) {
                try {
                    sm::SystemManager::createDB(name);
                } catch (sm::SMException e) {
                    std::cerr << "[ERROR] DB already exists" << std::endl;
                }
            } else if (type == Q_DROP_DB) {
                try {
                    sm::SystemManager::destroyDB(name);
                } catch (sm::SMException e) {
                    std::cerr << "[ERROR] no such DB" << std::endl;
                }
            } else if (type == Q_USE_DB) {
                try {
                    sm::SystemManager::useDB(name);
                } catch (sm::SMException e) {
                    std::cerr << "[ERROR] no such DB" << std::endl;
                }
                if (dbManager != nullptr) delete dbManager;
                dbManager = new sm::DBHandle(name);
            } else if (type == Q_SHOW_TABLES) {
                if (dbManager == nullptr) {
                    std::cerr << "[ERROR] DB not found" << std::endl;
                    return;
                }
                dbManager->showTables();
            } else if (type == Q_DESC_TABLE) {
                if (dbManager == nullptr) {
                    std::cerr << "[ERROR] DB not found" << std::endl;
                    return;
                }
                dbManager->descTable(name);
            } else if (type == Q_DROP_TABLE) {
                if (dbManager == nullptr) {
                    std::cerr << "[ERROR] DB not found" << std::endl;
                    return;
                }
                dbManager->dropTable(name);
            }
        }

        void CreateTableQuery::execute() {
            if (dbManager == nullptr) {
                std::cerr << "[ERROR] DB not found" << std::endl;
                return;
            }
            if (dbManager->findTable(name)) {
                std::cerr << "[ERROR] Relation exists" << std::endl;
            }
            dbManager->createTable(name, attrNum, attrs);
        }

        void InsertQuery::execute() {
            if (dbManager == nullptr) {
                std::cerr << "[ERROR] DB not found" << std::endl;
                return;
            }
            if (!dbManager->findTable(relName)) {
                std::cerr << "[ERROR] Realtion not found" << std::endl;
                return;
            }
            sm::RelAttrInfo relAttrInfo = dbManager->getRelAttrInfo(relName);
            rm::FileHandle db = rm::RecordManager::openFile(sm::SystemManager::appendDBExt(relName).c_str());
            sm::RelInfo relInfo = dbManager->getRelInfo(relName);
            for (int i = 0; i < v.size(); i++) {
                if (v[i].size() > relAttrInfo.size()) {
                    std::cerr << "[ERROR] Too many attributes" << std::endl;
                    return;
                }
                for (int j = 0; j < relAttrInfo.size(); j++) {
                    if (j >= v[i].size()) {
                        if (!relAttrInfo[j].nullable) {
                            std::cerr << "[ERROR] attribute " << j + 1 << " is not nullable" << std::endl;
                            return;
                        }
                    } else {
                        if (v[i][j].type != relAttrInfo[j].attrType) {
                            std::cerr << "[ERROR] attribute " << j + 1 << "'s type dismatches" << std::endl;
                            return;
                        }
                        if (relAttrInfo[j].isPrimary) {
                            /* find key */
                            rm::FileScan scan(db, relAttrInfo[j].attrType, relAttrInfo[j].attrLength,
                                    relAttrInfo[j].offset, 0, 0,
                                    EQ_OP, v[i][j].type == INT ? (void *)&v[i][j].iValue : (void *)v[i][j].sValue.c_str());
                            Record &r = scan.next();
                            if (r.rid.pageNum >= 0) {
                                std::cerr << "[ERROR] primary key conflict" << std::endl;
                                return;
                            }
                        }
                    }
                }
            }
            Record r((size_t)(relInfo.tupleLength + relInfo.bitmapSize + FLAG_SIZE));
            for (int i = 0; i < v.size(); i++) {
                r.clear();
                /* make record */
                for (int j = 0; j < relAttrInfo.size(); j++) {
                    if (j < v[i].size()) {
                        char *p = r.getData() + relAttrInfo[j].offset;
                        if (v[i][j].type == INT)
                            memcpy(p, &(v[i][j].iValue), relAttrInfo[j].attrLength);
                        else
                            memcpy(p, v[i][j].sValue.c_str(), relAttrInfo[j].attrLength);
                    } else {
                        char *p = r.getData() + relAttrInfo[j].nullBitOffset;
                        *p |= relAttrInfo[j].nullBitMask;
                    }
                }
                db.insertRec(r);
            }
        }
    }
}

#endif
